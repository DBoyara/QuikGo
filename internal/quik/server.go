package quik

import (
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"net"
	"os"
	"os/signal"
	"sync"
	"syscall"

	"github.com/pkg/errors"
	"go.uber.org/zap"
)

// QuikServer —É–ø—Ä–∞–≤–ª—è–µ—Ç TCP-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è callback –∏–∑ Lua
type QuikServer struct {
	listener     net.Listener
	logger       *zap.Logger
	mu           sync.Mutex
	clients      map[net.Conn]struct{}
	eventHandler func(event Event)
	ctx          context.Context
	cancel       context.CancelFunc
}

// NewQuikServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä QuikServer
func NewQuikServer(port int, isDevelopment bool) (*QuikServer, error) {
	logger, err := NewLogger(isDevelopment)
	if err != nil {
		return nil, errors.Wrap(err, "failed to create logger: %w")
	}

	listener, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
	if err != nil {
		return nil, errors.Wrap(err, "failed to start server: %w")
	}

	ctx, cancel := context.WithCancel(context.Background())

	server := &QuikServer{
		listener: listener,
		logger:   logger,
		clients:  make(map[net.Conn]struct{}),
		ctx:      ctx,
		cancel:   cancel,
	}

	logger.Debug("‚úÖ QuikServer –∑–∞–ø—É—â–µ–Ω", zap.Int("port", port))

	go server.acceptConnections()

	return server, nil
}

// acceptConnections —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Lua
func (s *QuikServer) acceptConnections() {
	for {
		conn, err := s.listener.Accept()
		if err != nil {
			select {
			case <-s.ctx.Done():
				s.logger.Debug("üõë –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º acceptConnections")
				return
			default:
				s.logger.Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞", zap.Error(err))
				continue
			}
		}

		s.logger.Debug("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç", zap.String("remote", conn.RemoteAddr().String()))

		s.mu.Lock()
		s.clients[conn] = struct{}{}
		s.mu.Unlock()

		go s.handleClient(conn)
	}
}

// handleClient –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Lua
func (s *QuikServer) handleClient(conn net.Conn) {
	defer func() {
		s.logger.Debug("üîª –û—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç", zap.String("remote", conn.RemoteAddr().String()))
		s.mu.Lock()
		delete(s.clients, conn)
		s.mu.Unlock()
		if err := conn.Close(); err != nil {
			s.logger.Error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", zap.String("remote", conn.RemoteAddr().String()), zap.Error(err))
		}
	}()

	reader := bufio.NewReader(conn)

	for {
		select {
		case <-s.ctx.Done():
			return
		default:
			msg, err := reader.ReadString('\n')
			if err != nil {
				if err.Error() == "EOF" {
					s.logger.Debug("üîª –ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", zap.String("remote", conn.RemoteAddr().String()))
				} else {
					s.logger.Error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç Lua", zap.Error(err))
				}
				return
			}

			var event Event
			if err := json.Unmarshal([]byte(msg), &event); err != nil {
				s.logger.Error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", zap.String("raw", msg), zap.Error(err))
				continue
			}

			if s.eventHandler != nil {
				s.eventHandler(event)
			}
		}
	}
}

// SetEventHandler —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
func (s *QuikServer) setEventHandler(handler func(event Event)) {
	s.eventHandler = handler
}

// Close –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func (s *QuikServer) close() {
	s.logger.Debug("üõë –ó–∞–∫—Ä—ã–≤–∞–µ–º QuikServer...")

	s.cancel()
	if err := s.listener.Close(); err != nil {
		s.logger.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è QuikServer", zap.Error(err))
	}

	s.mu.Lock()
	defer s.mu.Unlock()
	for conn := range s.clients {
		if err := conn.Close(); err != nil {
			s.logger.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", zap.String("remote", conn.RemoteAddr().String()), zap.Error(err))
		}
	}

	s.logger.Debug("‚úÖ QuikServer –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// RunServer –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –û–° (Ctrl+C, SIGTERM)
func RunServer(port int, isDevelopment bool, handler func(event Event), logger *zap.Logger) {
	server, err := NewQuikServer(port, isDevelopment)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", zap.Error(err))
		return
	}

	server.setEventHandler(handler)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C –∏ SIGTERM
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	<-sigChan
	logger.Debug("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
	server.close()
}
