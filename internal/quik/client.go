package quik

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"go.uber.org/zap"
)

// Client ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TCP-–∫–ª–∏–µ–Ω—Ç–æ–º.
type Client interface {
	sendRequest(ctx context.Context, request interface{}) (response, error)
	close() error
}

// QuikClient ‚Äî –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å QUIK.
type QuikClient struct {
	client Client
	logger *zap.Logger
	done   chan struct{}
}

// NewQuikClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä QuikClient.
func NewQuikClient(host string, port int, isDevelopment bool) (*QuikClient, error) {
	tcpClient, err := newTCPClient(host, port)
	if err != nil {
		return nil, errors.Wrap(err, "failed to create TCP client")
	}

	logger, err := NewLogger(isDevelopment)
	if err != nil {
		return nil, fmt.Errorf("failed to create logger: %w", err)
	}

	client := &QuikClient{
		client: tcpClient,
		logger: logger,
		done:   make(chan struct{}),
	}

	return client, nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.
func (q *QuikClient) Close() error {
	q.logger.Debug("üîª –ó–∞–∫—Ä—ã–≤–∞–µ–º QUIK-–∫–ª–∏–µ–Ω—Ç...")
	close(q.done)
	return q.client.close()
}
